// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/revision.proto

package revision

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetRevisionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRevisionRequest) Reset()         { *m = GetRevisionRequest{} }
func (m *GetRevisionRequest) String() string { return proto.CompactTextString(m) }
func (*GetRevisionRequest) ProtoMessage()    {}
func (*GetRevisionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ed083d664f15fcb, []int{0}
}

func (m *GetRevisionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRevisionRequest.Unmarshal(m, b)
}
func (m *GetRevisionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRevisionRequest.Marshal(b, m, deterministic)
}
func (m *GetRevisionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRevisionRequest.Merge(m, src)
}
func (m *GetRevisionRequest) XXX_Size() int {
	return xxx_messageInfo_GetRevisionRequest.Size(m)
}
func (m *GetRevisionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRevisionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRevisionRequest proto.InternalMessageInfo

type RevisionResponse struct {
	Revision             string   `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevisionResponse) Reset()         { *m = RevisionResponse{} }
func (m *RevisionResponse) String() string { return proto.CompactTextString(m) }
func (*RevisionResponse) ProtoMessage()    {}
func (*RevisionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ed083d664f15fcb, []int{1}
}

func (m *RevisionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevisionResponse.Unmarshal(m, b)
}
func (m *RevisionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevisionResponse.Marshal(b, m, deterministic)
}
func (m *RevisionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevisionResponse.Merge(m, src)
}
func (m *RevisionResponse) XXX_Size() int {
	return xxx_messageInfo_RevisionResponse.Size(m)
}
func (m *RevisionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RevisionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RevisionResponse proto.InternalMessageInfo

func (m *RevisionResponse) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func init() {
	proto.RegisterType((*GetRevisionRequest)(nil), "knock.api.v1.GetRevisionRequest")
	proto.RegisterType((*RevisionResponse)(nil), "knock.api.v1.RevisionResponse")
}

func init() { proto.RegisterFile("v1/revision.proto", fileDescriptor_2ed083d664f15fcb) }

var fileDescriptor_2ed083d664f15fcb = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x33, 0xd4, 0x2f,
	0x4a, 0x2d, 0xcb, 0x2c, 0xce, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc9,
	0xce, 0xcb, 0x4f, 0xce, 0xd6, 0x4b, 0x2c, 0xc8, 0xd4, 0x2b, 0x33, 0x54, 0x12, 0xe1, 0x12, 0x72,
	0x4f, 0x2d, 0x09, 0x82, 0x2a, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0xd2, 0xe3, 0x12,
	0x40, 0x08, 0x15, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x49, 0x71, 0x71, 0xc0, 0x4c, 0x92, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf3, 0x8d, 0x62, 0xb9, 0x38, 0x60, 0xea, 0x85, 0x02, 0xb9,
	0xb8, 0x91, 0x4c, 0x14, 0x52, 0xd0, 0x43, 0xb6, 0x4f, 0x0f, 0xd3, 0x32, 0x29, 0x39, 0x54, 0x15,
	0xe8, 0x16, 0x2b, 0x31, 0x38, 0x89, 0x45, 0x89, 0x20, 0xf9, 0xc3, 0x1a, 0xc6, 0x48, 0x62, 0x03,
	0xfb, 0xc8, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x73, 0x45, 0xcf, 0xe6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RevisionClient is the client API for Revision service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RevisionClient interface {
	GetRevision(ctx context.Context, in *GetRevisionRequest, opts ...grpc.CallOption) (*RevisionResponse, error)
}

type revisionClient struct {
	cc *grpc.ClientConn
}

func NewRevisionClient(cc *grpc.ClientConn) RevisionClient {
	return &revisionClient{cc}
}

func (c *revisionClient) GetRevision(ctx context.Context, in *GetRevisionRequest, opts ...grpc.CallOption) (*RevisionResponse, error) {
	out := new(RevisionResponse)
	err := c.cc.Invoke(ctx, "/knock.api.v1.Revision/GetRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RevisionServer is the server API for Revision service.
type RevisionServer interface {
	GetRevision(context.Context, *GetRevisionRequest) (*RevisionResponse, error)
}

// UnimplementedRevisionServer can be embedded to have forward compatible implementations.
type UnimplementedRevisionServer struct {
}

func (*UnimplementedRevisionServer) GetRevision(ctx context.Context, req *GetRevisionRequest) (*RevisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevision not implemented")
}

func RegisterRevisionServer(s *grpc.Server, srv RevisionServer) {
	s.RegisterService(&_Revision_serviceDesc, srv)
}

func _Revision_GetRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevisionServer).GetRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knock.api.v1.Revision/GetRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevisionServer).GetRevision(ctx, req.(*GetRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Revision_serviceDesc = grpc.ServiceDesc{
	ServiceName: "knock.api.v1.Revision",
	HandlerType: (*RevisionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRevision",
			Handler:    _Revision_GetRevision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/revision.proto",
}
